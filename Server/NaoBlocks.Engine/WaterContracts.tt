<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #><#
var contracts = new[] {
    "adl:AllowDirectLogging",
    "c:Command",
    "cn:CurrentName",
    "ct:ConversationType",
    "cv:Conversation",
    "d:Description",
    "fn:FriendlyName",
    "h:Hash",
    "hp:HashedPassword",
    "i:Id",
    "mn:MachineName",
    "n:Name",
    "rtn:RobotTypeName",
    "s:Source",
    "sa:Salt",
    "si:SourceId",
    "smt:SourceMessageType",
    "sn:SourceName",
    "st:SourceType",
    "t:Type",
    "v:Value",
    "vs:Values",
    "wa:WhenApplied",
}.Select(c => c.Split(':')).ToArray();
#>using Newtonsoft.Json.Serialization;

namespace NaoBlocks.Engine
{
    internal class DehydrationContractResolver
        : DefaultContractResolver
    {
        private readonly Dictionary<string, string> mappings = new();

        public DehydrationContractResolver()
        {
<# foreach (var c in contracts) { 
WriteLine($"            mappings.Add(\"{c[1]}\", \"{c[0]}\");");
} #>
        }

        protected override string ResolvePropertyName(string propertyName)
        {
            return mappings.TryGetValue(propertyName, out var value)
                ? value
                : base.ResolvePropertyName(propertyName);
        }
    }

    internal class HydrationContractResolver
        : DefaultContractResolver
    {
        private readonly Dictionary<string, string> mappings = new();

        public HydrationContractResolver()
        {
<# foreach (var c in contracts) { 
WriteLine($"            mappings.Add(\"{c[0]}\", \"{c[1]}\");");
} #>
        }

        protected override string ResolvePropertyName(string propertyName)
        {
            return mappings.TryGetValue(propertyName, out var value)
                ? value
                : base.ResolvePropertyName(propertyName);
        }
    }
}